% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/All_DataAccess.R
\docType{methods}
\name{Feature_table}
\alias{Feature_table}
\alias{Feature_table,ANY-method}
\alias{Feature_table,data.frame-method}
\title{Build or access the Feature_table.}
\usage{
Feature_table(object, errorIfNULL=TRUE)

\S4method{Feature_table}{ANY}(object, errorIfNULL = TRUE)

\S4method{Feature_table}{data.frame}(object)
}
\arguments{
\item{object}{An object among the set of classes defined by the MyDataSet
package that contain Feature_table}

\item{errorIfNULL}{(Optional). Logical. Should the accessor stop with
an error if the slot is empty (\code{NULL})? Default \code{TRUE}.}
}
\value{
A \code{\link{Feature_table-class}} object.
It is either grabbed from the relevant slot
if \code{object} is complex, or built anew if \code{object} is a
character matrix representing the taxonomic classification of
species in the experiment.
}
\description{
This is the suggested method for both constructing and accessing a table of
Feature names, organized with ranks as columns (\code{\link{Feature_table-class}}).
When the argument is a character matrix, Feature_table() will create and return a
\code{\link{Feature_table-class}} object.
Alternatively, if the first argument is an experiment-level (\code{\link{MyDataSet-class}})
object, then the corresponding \code{Feature_table} is returned.
Like other accessors (see See Also, below), the default behavior of this method
is to stop with an
error if \code{object} is a \code{MyDataSet-class} but does not
contain a \code{Feature_table}.
}
\examples{

}
